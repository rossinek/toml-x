#!/usr/bin/env node

import { readFileSync } from 'node:fs'
import { resolve } from 'node:path'
import { merge } from './index.js'

function parseArgs(args: string[]) {
  const flags = {
    numbersAsFloat: false,
    skipComment: false,
  }
  const files: string[] = []

  for (const arg of args) {
    if (arg === '--numbers-as-float') {
      flags.numbersAsFloat = true
    } else if (arg === '--skip-comment') {
      flags.skipComment = true
    } else if (arg.startsWith('--')) {
      console.error(`Unknown flag: ${arg}`)
      process.exit(1)
    } else {
      files.push(arg)
    }
  }

  return { flags, files }
}

function showHelp() {
  console.log(`
Usage: toml-x <command> [flags] [...files]

Commands:
  merge               Merge multiple TOML files

Flags:
  --numbers-as-float  Preserve float formatting (e.g., 1.0 instead of 1)
  --skip-comment      Skip adding the auto-generated comment at the top
  --help, -h          Show this help message

Examples:
  toml-x merge base.toml overrides.toml
  toml-x merge base.toml overrides.toml > merged.toml
  toml-x merge --numbers-as-float base.toml overrides.toml
  toml-x merge --skip-comment base.toml overrides.toml
`)
}

function commandMerge(args: string[]) {
  const { flags, files } = parseArgs(args)

  if (files.length === 0) {
    console.error('Error: No files specified')
    process.exit(1)
  }

  try {
    // Read all TOML files
    const configs = files.map((file) => {
      const path = resolve(process.cwd(), file)
      try {
        return readFileSync(path, 'utf-8')
      } catch (error) {
        if (error instanceof Error) {
          throw new Error(`Failed to read file '${file}': ${error.message}`)
        }
        throw error
      }
    })

    // Merge using the library function
    const rawOutput = merge(configs, { numbersAsFloat: flags.numbersAsFloat })

    // Replace generic comment with CLI-specific one if not skipped
    const output = flags.skipComment
      ? rawOutput
      : `# This file is autogenerated by: toml-x merge ${args.join(' ')}\n\n${rawOutput}`;

    console.log(output)
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Error: ${error.message}`)
    } else {
      console.error('An unknown error occurred')
    }
    process.exit(1)
  }
}

function main() {
  const args = process.argv.slice(2)

  if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
    showHelp()
    process.exit(0)
  }

  const command = args[0]
  const commandArgs = args.slice(1)

  switch (command) {
    case 'merge':
      commandMerge(commandArgs)
      break
    default:
      console.error(`Unknown command: ${command}`)
      console.error('Run "toml-x --help" for usage information')
      process.exit(1)
  }
}

main()
